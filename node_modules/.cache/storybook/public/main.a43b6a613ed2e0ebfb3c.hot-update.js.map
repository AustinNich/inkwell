{"version":3,"file":"main.a43b6a613ed2e0ebfb3c.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { useState, useContext } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Pagination from '@material-ui/lab/Pagination';\nimport InkwellContext from './context/inkwellcontext';\nimport ContextImplementation from './context/ContextImplementation';\n\n\n\n\n\nconst AnimePage = ({ data }) => {\n    const [pageNum, setPageNum] = useState(1);\n    let animePerPage = 9;\n    let animeDisplayed = pageNum * animePerPage;\n    let pageCount = Math.floor(data?.Page?.media.length / animePerPage);\n\n    const styles = {\n        root: {\n            background: \"radial-gradient(ellipse at center,\" +\n                \"#808080\" +\n                \" 0,\" +\n                \"#000000\" +\n                \" 100%)\",\n            height: 'auto',\n            width: '100%',\n            margin: '0, 0'\n\n        },\n        header: {\n            backgroundColor: 'grey'\n        },\n        card: {\n            width: '100%',\n            maxWidth: '350px',\n            height: 'auto',\n            border: 'solid 1px grey',\n            backgroundColor: 'darkgrey'\n        },\n        cardContainer: {\n            display: 'flex',\n            padding: '2%'\n        },\n        title: {\n            backgroundColor: 'green'\n        },\n        description: {\n            backgroundColor: 'white'\n        },\n        paginationContainer: {\n            backgroundColor: 'grey',\n        }\n\n    };\n\n\n    console.log(data, 'data coming in')\n    const animeList = data?.Page?.media.slice(animeDisplayed, animeDisplayed + animePerPage).map((animeObj) => (\n        < div style={styles.cardContainer} key={animeObj.id} data-cy={\"animeContainer\"} >\n            < div style={styles.card}  >\n                <img src={animeObj.coverImage.large} />\n                <p style={styles.title} > <b data-cy={`animeTitle`}>{animeObj.title.english}</b> </p>\n                <em ><p data-cy={`animeDescription`}>{animeObj.description}</p></em>\n            </div>\n        </div>\n    ));\n\n\n    const AnimePage = () => {\n        return (\n            <Paper style={styles.root}>\n                <Grid container spacing={3} justify='center' alignItems='center' >\n                    <Grid item xs={12} style={styles.header} align='center'>\n                        <Typography variant='h2' align='center' data-cy='page-title'>\n                            Welcome to the Anime Page\n            </Typography>\n                        <Typography variant='caption' >\n                            Powered by <b>Rakeem G.</b>\n                        </Typography>\n                    </Grid>\n                    <Grid item align='center' >\n                        <Grid container justify='center'>\n                            {animeList}\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12} style={styles.paginationContainer} align='center'>\n                        <Grid container justify='center'>\n                            <Pagination\n                                data-cy=\"pagination\"\n                                variant='outlined'\n                                color='primary'\n                                onChange={(e, value) => setPageNum(value)}\n                                defaultPage={1}\n                                page={pageNum}\n                                count={pageCount}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Paper >\n        )\n    }\n\n\n    return (\n        <ContextImplementation>\n            <AnimePage />\n        </ContextImplementation>\n    )\n}\n\nexport default AnimePage\n\nexport const getServerSideProps = async () => {\n    try {\n        let res = await fetch(\"http://localhost:3000/api/handler\");\n        let data = await res.json();\n        return {\n            props: data\n        }\n    } catch (err) {\n        console.error(err);\n        return {\n            props: {\n                error: 'failed to fetch data'\n            }\n        }\n    }\n}\n\n\n\n\n\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAMA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AARA;AAWA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAhCA;AAuCA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AADA;AADA;AACA;AAUA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AADA;AAJA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAPA;AADA;AADA;AAdA;AADA;AA+BA;AACA;AAEA;AACA;AAAA;AAIA;AACA;AAnGA;;;;;;AAoGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AACA;AADA;AAGA;AAHA;AAKA;AADA;AACA;AALA;AAAA;AAAA;AAQA;AARA;AAUA;AACA;AADA;AADA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;A","sourceRoot":""}
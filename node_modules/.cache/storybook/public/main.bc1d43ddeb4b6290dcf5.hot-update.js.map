{"version":3,"file":"main.bc1d43ddeb4b6290dcf5.hot-update.js","sources":["webpack:///./pages/components/AnimeDisplay.tsx"],"sourcesContent":["\nimport React, { useContext, useState } from 'react';\nimport InkwellContext from '../context/InkwellContext.js';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Pagination from '@material-ui/lab/Pagination';\n\n\ninterface AnimeInfo {\n    media: [{\n        id: number,\n        description: string,\n        title: {\n            english: string\n        },\n        coverImage: {\n            large: string\n        }\n    }]\n}\n\n\ninterface Data {\n    Page: AnimeInfo\n}\n\ninterface title {\n    title: string\n}\n\ninterface signature {\n    signature: string\n}\n\n\n\nconst AnimeDisplay = (data: Data) => {\n\n    const [pageNum, setPageNum] = useState(1);\n    let animePerPage = 9;\n    let animeDisplayed = pageNum * animePerPage;\n    let pageCount = Math.floor(data?.Page?.media.length / animePerPage);\n\n    const context = useContext(InkwellContext);\n    const { title: title, signature: signature } = context\n\n\n\n    const styles = {\n        root: {\n            background: \"radial-gradient(ellipse at center,\" +\n                \"#808080\" +\n                \" 0,\" +\n                \"#000000\" +\n                \" 100%)\",\n            height: 'auto',\n            width: '100%',\n            margin: '0, 0'\n\n        },\n        header: {\n            backgroundColor: 'grey'\n        },\n        card: {\n            width: '100%',\n            maxWidth: '350px',\n            height: 'auto',\n            border: 'solid 1px grey',\n            backgroundColor: 'darkgrey'\n        },\n        cardContainer: {\n            display: 'flex',\n            padding: '2%'\n        },\n        title: {\n            backgroundColor: 'green'\n        },\n        description: {\n            backgroundColor: 'white'\n        },\n        paginationContainer: {\n            backgroundColor: 'grey',\n        }\n\n    };\n\n    const animeList = data?.Page?.media.slice(animeDisplayed, animeDisplayed + animePerPage).map((animeObj) => (\n        < div style={styles.cardContainer} key={animeObj.id} data-cy={\"animeContainer\"} >\n            < div style={styles.card}  >\n                <img src={animeObj.coverImage.large} />\n                <p style={styles.title} > <b data-cy={`animeTitle`}>{animeObj.title.english}</b> </p>\n                <em ><p data-cy={`animeDescription`}>{animeObj.description}</p></em>\n            </div>\n        </div>\n    ));\n\n\n    return (\n        <Paper style={styles.root}>\n            <Grid container spacing={3} justify='center' alignItems='center' >\n                <Grid item xs={12} style={styles.header} align='center'>\n                    <Typography variant='h2' align='center' data-cy='page-title'>\n                        {title}\n                    </Typography>\n                    <Typography variant='caption' >\n                        Powered by <b>{signature}</b>\n                    </Typography>\n                </Grid>\n                <Grid item align='center' >\n                    <Grid container justify='center'>\n                        {animeList}\n                    </Grid>\n                </Grid>\n                <Grid item xs={12} style={styles.paginationContainer} align='center'>\n                    <Grid container justify='center'>\n                        <Pagination\n                            data-cy=\"pagination\"\n                            variant='outlined'\n                            color='primary'\n                            onChange={(e, value) => setPageNum(value)}\n                            defaultPage={1}\n                            page={pageNum}\n                            count={pageCount}\n                        />\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Paper >\n    )\n}\n\nexport default AnimeDisplay\n\n\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;;AA+BA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAIA;AACA;AACA;AAKA;AACA;AACA;AARA;AAWA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAhCA;AAsCA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AADA;AADA;AAWA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AADA;AAJA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAPA;AADA;AADA;AAdA;AADA;AA+BA;AACA;AA9FA;AA+FA;;;;A","sourceRoot":""}